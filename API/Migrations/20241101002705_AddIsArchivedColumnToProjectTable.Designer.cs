// <auto-generated />
using API;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.Migrations
{
    [DbContext(typeof(ConstructionContext))]
    [Migration("20241101002705_AddIsArchivedColumnToProjectTable")]
    partial class AddIsArchivedColumnToProjectTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("construcciones_xyz")
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("API.Engineer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.ToTable("Engineer", "construcciones_xyz");
                });

            modelBuilder.Entity("API.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<int>("EngineerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EngineerId");

                    b.HasIndex("State");

                    b.HasIndex("Type");

                    b.ToTable("Project", "construcciones_xyz");
                });

            modelBuilder.Entity("API.ProjectState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.ToTable("ProjectState", "construcciones_xyz");
                });

            modelBuilder.Entity("API.ProjectType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.ToTable("ProjectType", "construcciones_xyz");
                });

            modelBuilder.Entity("API.Project", b =>
                {
                    b.HasOne("API.Engineer", "Engineer")
                        .WithMany("Projects")
                        .HasForeignKey("EngineerId")
                        .IsRequired()
                        .HasConstraintName("FK_Project_Engineer");

                    b.HasOne("API.ProjectState", "ProjectState")
                        .WithMany("Projects")
                        .HasForeignKey("State")
                        .IsRequired()
                        .HasConstraintName("FK_Project_ProjectState");

                    b.HasOne("API.ProjectType", "ProjectType")
                        .WithMany("Projects")
                        .HasForeignKey("Type")
                        .IsRequired()
                        .HasConstraintName("FK_Project_ProjectType");

                    b.Navigation("Engineer");

                    b.Navigation("ProjectState");

                    b.Navigation("ProjectType");
                });

            modelBuilder.Entity("API.Engineer", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("API.ProjectState", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("API.ProjectType", b =>
                {
                    b.Navigation("Projects");
                });
#pragma warning restore 612, 618
        }
    }
}
